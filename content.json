{"pages":[],"posts":[{"title":"Charles手机和浏览器抓包","text":"charles 浏览器和手机抓包@(charles)[http|https][TOC] ##http手机抓包操作步骤 1打开Charles，点击proxy-点击Mac OS x proxy取消前面的对勾，对勾保存是电脑抓包-点击proxy setting-在enable transparent http proxy 前面打对勾然后点击ok-点击设置保证跟电脑连接的是同一个局域网点击链接的wifi-选择手动-输入服务器的IP（安装了Charles的电脑的IP地址，可在Charles-help-local IP adress中查看）和端口号-点击Charles（⭕️）开始录制按钮，手机这边操作就可以开始抓包了； ##Charles Android/ios手机抓https协议 1234561.电脑端打开Charles-help-ssl proxying-install Charles root certificate2.下载安装证书，默认路径不需要更改，在钥匙串访问中选择证书双击证书文件-选择始始终信任3.电脑端打开Charles-help-ssl proxying-install Charles root certificate on a mobile device or remote browers-下载安装证书，默认路径不需要更改，在钥匙串访问中选择证书双击证书文件-选择始始终信任4.设置手机代理,要抓包的手机与电脑在同一个局域网下（链接同一个Wi-Fi即可），打开手机设置-选择已经连接的Wi-Fi-手动代理-输入安装charles电脑的IP（charles-help-localip address）和端口号（proxy-proxy setting-proxies）5.手机在浏览器中输入：chls.pro/ssl6.手机弹出提示：安装配置描述文件，选择允许，即可 Charles过滤12345方法一：打开Charles，页面左下方有一个filters，在里面输入自己想要过滤的内容部分即可方法二：菜单栏选择 “Proxy”-&gt;”Recording Settings”，在弹出的窗口中选择 Include 栏，再点击“Add”，在弹出的窗口中输入需要监控的协议，主机地址，端口号等信息，来添加一个项目。方法三：在想过滤的网络请求上右击，选择 “Focus”，之后在 Filter 一栏勾选上 Focussed 一项 ##Charles模拟弱网测试 1打开charles-proxy-throttle Settings-勾选Enable settings-在throttle preset中选择要模拟的网路环境，如果没有的话可以自己在下方设置-ok ##charles如何打断点，修改response数据 11.打开将要访问的网址，通过Charles抓到想要修改数据的接口,双击接口连接勾选Breakpoints 12.点击Charles-proxy-Breakpoints settings 13.进入breakpoint settings页面,设置完成之后，点击ok 14.重新访问该接口，charles自动跳转到breakpoints页面 15.此时修改Response数据，点击Edit Response，切换底部tab至Text，修改所需要的数据 16.修改数据后，点击Execute，查看访问的页面，数据将会显示已修改的Response数据","link":"/2019/08/27/Charles/"},{"title":"blogs","text":"[TOC] #如何在hexo新建文件并上传至博客1.首先打开终端，切换到_posts文件所在路径，hexo new 文件名（新建一个.md文件）2.以markdown的形式打开进行编辑，完成之后在终端中输入：hexo generate，回车，生成静态页面3.再输入：hexo server，回车，到localhost:4000预览博客效果4.最后输入：hexo deploy，回车，同步到github上去就行了。","link":"/2019/08/27/blogs/"},{"title":"Pycharm永久激活方法","text":"[TOC] ##Pycharm的永久激活方法第一步：首先电脑上有专业版的Pycharm,点击此链接，下载破解补丁[https://pan.baidu.com/s/1mcQM8CLUnweY02ahKEr4PQ] 第二步：将下载好的破解补丁文件移动到 /Applications/PyCharm.app/Contents/bin/ 目录中 12&gt; mv 破解补丁 /Applications/PyCharm.app/Contents/bin/ &gt; 第三步：用编辑器打开 /Applications/PyCharm.app/Contents/bin/pycharm.vmoptions 文件，添加 -javaagent:你pycharm的安装路径\\bin\\JetbrainsCrack-release-enc.jar在最后一行 123​```python cd /Applications/PyCharm.app/Contents/bin/ sudo vi pycharm.vmoptions 在文件的最下面一行输入 1-javaagent:/Applications/PyCharm.app/Contents/bin/破解补丁 第四步：启动PyCharm,输入下方的激活码激活，然后点击ok即可。 123&gt; ```python YZVR7WDLV8-eyJsaWNlbnNlSWQiOiJZWlZSN1dETFY4IiwibGljZW5zZWVOYW1lIjoiamV0YnJhaW5zIGpzIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTktMTEtMjYifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjAxOS0xMS0yNiJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjAxOS0xMS0yNiJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDE5LTExLTI2In0seyJjb2RlIjoiR08iLCJwYWlkVXBUbyI6IjIwMTktMTEtMjYifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOS0xMS0yNiJ9LHsiY29kZSI6IkNMIiwicGFpZFVwVG8iOiIyMDE5LTExLTI2In0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDE5LTExLTI2In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTktMTEtMjYifSx7ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjAxOS0xMS0yNiJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDE5LTExLTI2In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTktMTEtMjYifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOS0xMS0yNiJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE5LTExLTI2In0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMTktMTEtMjYifSx7ImNvZGUiOiJSU1UiLCJwYWlkVXBUbyI6IjIwMTktMTEtMjYifV0sImhhc2giOiIxMTA1NzI3NC8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-rsJR5mlJcjibqRu1gQAMUCngMe8i+AOWIi+JZkNFYPET2G1ONcLPcIzoATTRi6ofkDm5l+3Y4HXjBPjVU6bHDdMBAzCnUqpXKsCknwSYyPSU0Y5pzuLvw6O9aPlQ46UBoTEC2BL5W6f11S7NlAq7tTbDuvFUynqSGAmTEfuZtKmzRmp20ejTPuMlSO7UqSkZvkg6YvSTrax1d2K+P9SAmVGZ9iC7AzBs4AwTf84QB9qHvE/Nh0oELSHWGG9hsZZ7sVghI/39/jPQFTp8GLFsl36ZPybPhGDam721zxS9H++/eJk23Jz3nxaRluE4dWmpHrDg1qBHp8qVpSFejg2QYw==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow== ```","link":"/2019/09/03/Pycharm永久激活方法/"},{"title":"linux命令总结","text":"常用快捷键123456789101112131415161718192021苹果手机截屏键：关机键+home键小米手机的截屏：右边音量下键+屏幕上的三个横线同时摁；Vivo手机截屏：右侧手机电源键+音量下键OPPO手机截屏：三指往下滑；PMO(Project Management Office)一般称为项目管理办公室、项目管理中心或者项目管理部，是在组织内部将实践、过程、运作形式化和标准化，同时在组织内各机能间，为推动专案前进产生各种工作资源冲突时，负责协调整合的机能，所以是为了提高组织管理成熟度的核心部门，它根据业界最佳实践和公认的项目管理知识体系（PMBOK），并结合企业自身的业务和行业特点，为组织量身定制项目管理流程、培养项目经理团队、建立项目管理信息系统、对项目提供顾问式指导、开展多项目管理等，以此确保项目成功率的提高和组织战略的有效贯彻和执行。MVP的全称为Model-View-Presenter，Model提供数据，View负责显示，Presenter负责逻辑的处理。Mac电脑Chrome浏览器开发者工具的快捷键：开发者工具：option＋command＋ijavascript控制台：option＋command＋j或者按option＋command＋c也可以打开在终端中打开另一个终端的快捷键：command+T liunx常用命令123456789101112131415161718进入root账户：sudo -I切换至普通用户：su - username(账户名)在终端中：control+c退出之前执行的命令，clear清屏；桌面的位置：/User/用户名/Desktop驱动所在位置： /System/Library/Extensions如何在桌面上创建一个文件方法1:1.在桌面上创建一个文件夹2.cd ,将文件夹拖到终端中回车3.touch filename.xxx(filename:文件名，xxx：后缀名)方法2:点击启动台-其他-文本编辑——shift + command + T （默认是.rtf,转化为.txt）-command+s保存,cd 切换目录，cd.切换至当前目录，cd.. 切换至上级目录ls / ：查看当前目录下的文件或文件夹；ls -l :显示当前目录下的详细文件信息，ls -a :显示当前目录下的详细信息；mkdir directoryname:创建文件夹mkdir -p a/b/c:一次性创建三级文件夹；cp:拷贝文件；rm:移动文件；rm:删除文件；chmod:更改文件权限","link":"/2019/08/25/linux命令总结/"},{"title":"mysql","text":"mysql忘记密码解决方法mysql 解决忘记密码问题 mac下mysql 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: 新入了mac pro，安装好mysql后，用终端进入mysql遇到个问题： 1045 (28000): Access denied for user ‘root’@’localhost’ (using password: N 讲道理，我还设密码呢，但是第一次进来就报错，goo了一下大概原因可能是mysql创建的时候给自动分配了密码。 不管分配没分配密码，反正一般的解决方法就是：先跳过验证，再重设密码。 具体步骤： 先关闭MySQL服务；执行 sudo /usr/local/mysql/support-files/mysql.server stop 或者在系统偏好设置中关闭MySQL服务(如果电脑有设置密码的，此处会要求输入计算机密码) 2.去mysql文件夹里设置跳过验证（3步） 12345678910先进入mysql文件夹：cd /usr/local/mysql/bin/设置权限，如果电脑有设置密码（开机和解锁计算机时要求输入的那个密码），在输入此句后会要求输入密码。输入密码后按回车确认sudo su跳过验证./mysqld_safe --skip-grant-tables &amp; 3.开始设置我们自己的新密码 打开一个新的终端，输入 1/usr/local/mysql/bin/mysql -u root -p 然后会要求输入密码，因为此时根本没有密码，所以直接点确认，显示以下信息表示成功进入mysql(与windows系统一样) 12345678910111213Welcome to the MySQL monitor. Commands end with ; or \\g.Your MySQL connection id is 20Server version: 5.7.11Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the current input statement.mysql&gt; 现在设置新密码，注意要打引号： 1UPDATE mysql.user SET authentication_string=PASSWORD(&apos;cc77&apos;) where User=&apos;root&apos;; 回车确认，显示以下信息表示修改密码成功 12Query OK, 1 row affected, 1 warning (0.00 sec)Rows matched: 1 Changed: 1 Warnings: 1 然后刷新一下，让上述修改生效： 1flush privileges; 刷新成功会显示以下信息： 1Query OK, 0 rows affected (0.01 sec) 4.重启mysql,用新密码登录，可以登录成功了。但是进行其他mysql操作，会显示： ERROR 1820 (HY000) :You must reset your password using AlTER USER statement before executing this statement. 意思是还要再重设一遍密码，直接输入： 1SET PASSWORD = PASSWORD(&apos;cc77&apos;); 修改成功后，终端会显示： 1Query OK, 0 rows affected, 1 warning (0.01 sec) 至此，修改密码彻底完成，可以做任何相关sql操作了","link":"/2019/08/25/mysql/"},{"title":"app测试","text":"##[TOC] ##功能测试 不考虑代码的具体实现，只需要检查功能是否符合产品需求文档； 安装1.正常安装测试，检查是否安装成功。 2.APP版本覆盖测试。例如：先安装一个1.0版本的APP,再安装一个高版本(1.1版本)的APP，检查是否被覆盖。 3.回退版本测试。例如：先装一个2.0版本的APP,再安装一个1.0版本的APP,正常情况下版本是可以回退的。 4.安装时内存不足，弹出提示。 5.根据安装手册操作，是否正确安装。 6.安装过程中的意外情况（强行断电、断网、来电话了、查看信息）等等，检查会发生的情况。 7.通过‘同步软件’，检查安装时是否同步安装了一些文件。 8.在不同型号、系统、屏幕大小、分辨率上的手机进行安装。 9.安装时是否识别有SD卡，并默认安装到sd卡中。 10.安装完成后，能否正常启动应用程序。 11.安装完成后，重启手机能否正常启动应用程序。 12.安装完成后，是否对其他应用程序造成影响。 13.安装完成后，能否添加快捷方式。 14.安装完成后，杀毒软件是否会对其当做病毒处理。 15.多进程进行安装，是否安装成功。 16.在安装过程中，所有的提示信息必须是英文或者中文，提示信息中不能出现代码、符号、乱码等。 17.安装之后，是否自动启动程序。 18.是否支持第三方安装。 19.在安装中点击取消。卸载1.用自己的卸载程序进行卸载，检查是否卸载干净。 2.用第三方工具，检查是否卸载干净。 3.在卸载过程中，点击取消按钮，看是否正常退出卸载程序，检查软件是否还能继续正常使用。 4.卸载过程中，出现意外（比如手机关机，没电，查看信息，接打电话），程序是否还能运行。 5.在卸载过程中，突然重启设备，再次访问程序，是否还能运行。 6.在没用使用程序时，删除目录文件，看程序是否能运行。 7.在使用过程中，直接删除目录文件，程序是否还能运行。 8.不同系统、硬件环境、网络环境下进行卸载。 9.卸载成功后，是否对其他程序有影响。 10.卸载后再次安装，是否正常使用。 11.在卸载过程中，所有的提示信息必须是英文或者中文，提示信息中不能出现代码、符号、乱码等。 更新1.当客户端有新版本时，提示更新。 2.非强制更新，可以取消更新，旧版本正常使用，下次使用软件时，仍然会出现更新提示。 3.强制更新，强制更新而用户没有更新时，退出客户端，下次启动，依然提示更新。 4.不卸载更新，检查是否可以更新。 5.不卸载更新，检查资源同名文件如图片等是否更新成最新版本。 6.非wifi网络下，提示是否更新，取消就加入待下载，wifi下自动更新。push消息推送推送的对象：全部推送，精确推送，安卓和IOS渠道推送消息简介 消息形式：通知栏，弹出弹框 消息内容：简介内容注意字数过多溢出情况。消息详情 注意详情所支持的内容，包括文字、图片、表情包、换行以及链接跳转。消息推送场景（支持定时推送） 消息推送时间 设置过去时间 未推送之前修改消息内容 删除消息，查看是否还会推送 客户端运行状态 前台运行 后台运行 进程关闭状态 特殊场景 多个提醒冲突 当天设置当天推送 当天设置隔几天起效交叉事件 app在前台和后台运行时，接打电话，文件下载，聊微信，回短信，插拔耳机，音乐收听时app的反应； 1）多个App同时运行是否影响正常功能 2）App运行时前/后台切换是否影响正常功能 3）App运行时拨打/接听电话 4）App运行时发送/接收信息 5）App运行时发送/收取邮件 6）App运行时切换网络（2G、3G、wifi） 7）App运行时浏览网络 8）App运行时使用蓝牙传送/接收数据 9）App运行时使用相机、计算器等手机自带设备 ##兼容性测试 ​ 不同的手机型号 不同操作系统 不同的屏幕分辨率和尺寸 网络环境（2G,3G,4G,WIFI） ##Ui测试 ​ 文案的测试 字体，字号，格式，规范 标题和正文，中英文换行，错别字，大小写，全半角标点 图片的测试 清晰，尺寸，配色，风格； 布局的测试 尺寸大小，位置合理，排序规律，对齐方式； 控件的测试 对话框 状态 是否在对话框显示的同时可进行程序其他操作 位置 显示的位置是否在可视范围内，是否子啊屏幕中央 多个一级二级对话框并存时，层级关系是否正确 移动 是否可以移动对话框 文本框 默认值 是否为空 是否有提示文案 边界值 长度限制，最多限制字符，超出屏幕上下方等 超出限制的界面提示，显示，处理，跳转等 内容 前置/中置/后置空格内容 中文/英文/数字普通文本内容 引号/逗号特殊富豪内容 全角/半角内容 复制粘贴的内容 大小写全半角的内容 不符合格式的内容 滑动滚轮 滚轮的触控区域 滚轮的数值限制 向上向下滑到极限值的处理 滚轮的对应跳转 日期滚轮 涉及到年月日的跳转 时间滚轮 涉及到24小时和12小时，上下午的跳转 上下微调按钮 默认起始值 调整的变化值 最大值与最小值 输入数据后微调的值 输入的数据是否作有效性验证 选项按钮 单选按钮 默认选项是否正确合理 选中其他选项，会自动取消当前选项 存在多个选项组时，选择其中一组的选项不会影响其他选项组 多选按钮 默认选项是否正确合理 选择其他选项不会影响当前选项 图标按钮 图标图片是否正确合适 点击图标时否调出对应页面 图标tooltip触发时机是否正确合理 默认形态 是否勾选 选项值的记忆 ##易用性 ##上线后期的舆情跟踪 ​ 新app上线之后，用户对此应用的评价，存在哪些测试期间未发现的bug；","link":"/2019/09/03/app测试/"},{"title":"公众号测试","text":"[TOC] ##基础功能点 ​ 是否可以正常的关注和取消关注 我们自己提供出去的二维码能够被用户识别，扫描后即可关注我们 用户回复关键字，是否能得到正确的回复 用户是否可以查看往期文章，历史资料 群发用户是否可以收到我们的消息 ##扩展功能点（微商网站类型） ​ 测试基础功能 登录，注册，支付，注册发送的验证码是否可以用等等 测试性能 有时一些微站会进行秒杀活动，需要进行性能测试，保证我们的API接口不崩溃 测试数据库 检查数据是否正常入库或者已进行修改 测试界面的一些数据信息 进行一些操作之后，看看界面的一些信息是否做实时更新 界面检查 不同的手机界面展示不一样","link":"/2019/09/03/公众号测试/"},{"title":"test","text":"[TOC] ##测试人事面试的问题 *1.自我介绍 * 您好！我叫…，今年…岁，来自…，毕业于…，一直从事…行业，目前有3年的工作经验，熟悉功能测试，自动化测试和接口测试，最近的一个项目是…(对最近的一个项目进行介绍)。 2.什么专业？为什么想要干测试呢？ … 3.你为什么要从上家公司离职？ 在之前的公司待了两年，技术上没有什么发展空间了，还年轻，就想换一个更好的环境，有一个更大的发展空间。 4.未来3到5年的一个职业规划？ … 5.你们公司在哪？ （具体到街道，哪号楼，公司旁边有啥？你平时座什么车去？） … 6.你们公司有多少个人？有几个测试？几个开发？你们由谁管？ 23个人，公司的人员组成：人事（1），老板（1），财务（2），行政（1）， 我们公司技术团队有18个人，前端（4），后台（4），UI设计师（1），andriod（1）,ios（2）,测试（3），运维（1）,产品经理（2） 7.你们公司主要做什么的？ … 8.你经常和那些部门沟通配合？ 我们经常和前端，后端，UI,产品沟通配合 9.你们公司老板叫什么？ … 10.你之前薪水是多少？现在期望薪资是多少？ … 11.你的薪资是由什么组成的？ 基本工资+绩效，基本工资.k,绩效工资.k,绩效根据每个月KPI考核表评定，公司五险一金是按照国家最低标准交的，每个月大概扣四百多，扣除个人所得税800多，每个月工资税后大概7.5k左右，不过每个月都有交通补贴（10）+餐补（15），每个月到手差不多8k左右。 12.你对公司加班有什么看法？ 合理的加班或者是线上有急事这样的加班，肯定是义不容辞的，但是如果是形式性加班，每天固定几点才能走或者是996这样的，比较不希望有这样的情况。 *13.你还有什么问题要问的吗？ * 技术面试：咱们项目组有多少个人？项目目前处于什么阶段测试情况？都做哪些方面的测试？ 人事面试：咱们公司五险一金的基数？公司加班多不多？上下班时间弹性吗？多久涨一次薪？ *14.你的项目做了多久？ * 6个月 *15.说一下你的优点？ * 性格外向，喜欢交朋友，擅于与人沟通，具备团队合作精神；有责任心，耐心，勇于担当；学习能力强，能吃苦，抗压能力强；对于要做的事情很执着，一分钟都不想耽误，直至完成；工作生活中都很守时重诺； *16.说一下你的缺点？ * 太追求完美，只要自己认定的事，不仅要做成，还要做的非常棒，不允许有任何瑕疵，因此做事情的时候，自己总会有很大压力，担心达不到自己的预期； *17.你的领导是怎么评价你的？ * 工作很努力，学习能力强，什么事交给我做很放心 18.你的同事是怎么评价你的？ 之前的同事她们都很喜欢跟我搭档做事，说我特别的靠谱，好沟通 19.能否接受出差？ 出差的话，可以接受，但不知道贵公司出差频率怎么样？大概去哪些城市？ 20.你对我们公司有什么了解的吗？ … *21.谈谈你对跳槽的看法？ * 跳槽分为很多种，对于处理不好同事关系等原因在公司待不下去跳槽，这个我是不看好的，这是属于个人问题，如果不改正，到下一家公司也很难待下去；如果是在一个公司呆了两三年，技术和个人发展很长一段时间没有增长，可以适当的转换环境，在新的环境里可以有新的思路，这种我是不反对的，而我选择跳槽也是因为这个原因。 *22.你想找一个什么样儿的公司？ * 找一个可以能用到我会的这些方面的公司，其次是能在这个公司被认可，希望大家都喜欢技术层面的，有气氛，大家一起想把项目做成，大家都积极努力。 *23.你的优势在哪？ * 首先，比较喜欢做测试，兴趣还是很重要的，所以会非常积极的研究适合现在用的技术，研究一些适合现在用的工具，思维比较缜密，测试对细节的思考也是比较重要的，跟团队的沟通和交流也还可以。 ##功能测试面试的问题 1.常用的Linux命令 ls:查看当前目录下的文件内容； cd:切换当前工作目录； touch：创建文件； mkdir:创建目录/文件夹； rm:删除；cp:复制；rm:移除； Cat/more/head/tail查看日志文件内容； grep:搜索文本文件名； ln-s:创建软连接；ln:创建硬连接； tar-zcvf 包名.tar.gz 被打包的文件：打包和解包；tar-zxvf 包名.tar.gz:解包和解压缩； tar -zxvf 包名.tar.gz -C 路径 解压到指定路径下 chmod:修改文件权限； kill -9 进程的id ：强制杀死某个进程； top:动态查看系统资源； netstat -anptu | grep 进程名：查看某个程序的端口号； ps -aux | grep 进程名：查看指定应用的进程； 2.用Linux干吗 Linux是一个操作系统，（大多数的软件服务器都用它，因为它快，安全）作为测试用linux搭建测试环境，开发把项目写好，把项目打成jar包或war包给我们，我们在linux里面进行部署,我们使用Apache/Nigix/Tomcat,把war包上传上去，该创建文件夹创建文件夹，该创建用户创建用户（搭建环境里面用到的linux命令，创建文件，创建文件夹，压缩，解压）环境搭建好之后，当测试过程中遇到问题，需要连接数据库连接不到数据库，或需要重启服务的时候，我们需要重启电脑，当系统出现问题的时候，需要查询日志，第一查询软件的日志，我们从客户端里查不到，因为日志是写在系统里的，写在linux服务器里的，第二需要查询linux系统本身的日志，比如linux系统启动不起来了 3.mysql数据库的增删改查，关联查询，子查询，内连接（需要熟练） 4.Navicat是什么？ Navicat是连接数据库的客户端 5.软件测试的模型分为哪几种？ ​ V模型(重点) 绘制：需求分析-概要设计-详细设计-编码-单元测试-集成测试-系统测试-验收测试 优点：阶段清晰，文档驱动 缺点：不适应需求变化，风险后延（bug修复时间较晚），返工量大 W模型（重点） 绘制：开发V：需求分析-概要设计-详细设计-编码-集成-实施 -交付 测试V:系统测试设计-集成测试设计-单元测试设计-单元测试-集成测试-系统测试-验收 优点：关注软件开发的全过程，早介入，早发现，早修复，缺陷的修复随着开发过程成指数上升 缺点：灵活度低 H模型（了解） 组成：测试准备，测试就绪点，测试执行 优点:将测试流程独立出来，测试流程与其他流程并行 缺点：技术要求高，管理要求高 6.软件测试的分类？ ​ a.按照阶段划分 单元测试：对单独的功能或模块进行测试 集成测试：对多个功能进行组合测试 系统测试：站在系统的角度，看程序是否满足客户需求 验收测试：客户针对自己的需求进行测试 负责人：客户或者第三方机构或客户授权乙方进行测试 分类：α测试 （内测）， β测试 （公测）， γ测试（候选版本） b.按是否覆盖源代码划分 黑盒测试：不需要关注代码，只需要聚焦业务功能 功能测试 ​ 业务功能（登录注册等） 界面测试（UI）关注界面美观，页面布局等 易用性测试（鼠标三次点击直达用户目的，enter键等快捷键） 安装测试 卸载和升级测试 性能测试:时间性能,稳定性能,压力测试,负载测试 白盒测试:需要看代码 灰盒测试:既要关注代码，又要关注业务功能 c.按是否运行划分 静态测试:测的是需求或设计文档 动态测试:测的是程序 d.按照是否自动化划分 手工测试:测试人员手动进行测试的方法 自动化测试:通过工具或代码帮助测试人员更加高效进行测试的一种方法 e.其他 冒烟测试:最基本的功能和流程 回归测试:bug回归和旧功能回归 随机测试：根据测试人员的经验对一些重要的业务功能或测试用例未覆盖的某些功能进行 探索性测试：具体问题，具体分析 7.测试用例的10要素？ 用例编号（ID），测试点(正向/逆向)，模块，优先级，前置条件，测试数据，测试步骤，预期结果，实际结果，是否自动化 8.测试用例的8种设计方法？ 等价类划分法，边界值法，错误推测法，场景法，判定表法，因果图法，流程图法，正交法 9.你在测试过程中编写过测试用例吗？都用了哪些方法？(常用) 等价划分类：分为有效等价类和无效等价类，例如：三角形两边之和大于第三边是一个定理，如果我们输入一个参数，他们的和，小于第三个参数，那么相当于两边之和小于第三边，就构成不了三角形，就相当于是无效等价类。 输入的两个参数的和，加起来大于第三边的话，就相当于有效等价类。 边界值分析法：例如：购买0个，购买1个，购买-1个，这就属于边界值，购买时候的最大数量也是属于边界值，超过最大数量，等于最大数量或者小于最大数量相当于是边界。 错误猜测法：主要是根据经验吧，因为测试的时候每个系统都可能是登录系统，之前登录系统可能发现过某些bug，再去猜一下，这个系统是不是也可能会出现这样的bug。 场景法：模拟用户的使用场景。 10.什么是缺陷？ 执行测试用例时，预期结果和实际结果不一致 11.如何判断是不是缺陷？只要满足一下五个条件之一就算缺陷 软件未实现产品说明说要求的功能 软件中出现了产品说明书中明确指出不应该出现的错误 软件实现了产品说明中未提及的功能 软件未实现产品说明书中，虽未提及但应该实现的功能 难以理解，运行缓慢，不好使用等多站在用户的角度考虑问题 11.缺陷产生的根本原因 需求变更，沟通不畅，信息不同步，软件复杂度，进度压力 12.缺陷的10大要素？ ID，缺陷的标题，严重程度，模块，优先级，复现步骤，预期结果，实际结果，状态，缺陷的类型 严重程度：严重（s1）：主功能不可用，例如闪退，不能启动等 一般（s2）：次功能不可用，边界或异常未进行处理等 微小（s3）：易用性，界面展示，小的性能等问题 建议（s4）：建议性问题 优先级： p0：必须在24小时之内解决 p1：产品上线前解决 p2：下一个版本就解决 状态：新建（new），打开(open)，延期，拒绝(rejected)，再次打开(reopen)，关闭(closed),已解决（fixed） 缺陷的类型：功能错误，界面错误，兼容性错误，易用性，改进意见 13.测试的5大流程？ ​ a.需求分析与评审 以需求评审会的形式，参与的人员：产品经理，项目经理，开发，测试，ui等 测试的主要职责：1.确保自己对文档有清晰的理解，没有疑惑 2.确定文档的正确性与完整性，能够指导后期的工作 3.对文档中存在不合理的地方提出自己的修改意见 b.编写测试计划与测试方案 测试计划：管理型文档，主要解决：谁来做？做什么？ 测试方案：技术型文档，主要解决：怎么做？ c.设计测试用例与评审 d.执行测试用例与缺陷跟踪 e.编写测试报告 14.敏捷开发的5个活动 迭代，迭代计划，每日站会，评审会，回顾会 敏捷开发的周期一般为1-2周，一次迭代（sprint）增加几个功能 ###面试题 1.内存溢出与内存泄漏 内存溢出（ out of memory）：是指程序在申请内存时，没有足够的内存空间供其使用； 内存泄露 （memory leak）：是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害 可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光； 二者的关系：内存泄露会最终会导致内存溢出； 2.冷启动与热启动 app被后台杀死后，在这个状态打开app，这种启动方式叫做冷启动； 热启动：指app没有被后台杀死，仍然在后台运行，通常我们再次去打开这个app，这种启动方式叫 热启动 3.怎么定位一个bug是前后端的问题?fildder的主要应用场景? 用fildder进行抓包，首先看到底是请求的时候发送的参数错误了还是返回的时候返回错了，如果请求是对的，返回是错的，那肯定就是服务器的问题如果是请求的时候参数就传错了，那基本上就是前端的问题。 fildder的主要用于抓包，请求参数，请求参数类型，浏览器不支持的时候可以抓包，抓请求，抓响应，也可以进行打断点，功能测试,接口测试需要看一下开发前端页面调用的接口对不对，我需要过滤一下，APP测试时模拟弱网测试。 4.bug提给开发，就向石沉大海一样，你该怎么做？ 首先我会跟先跟开发沟通一下，问是这个bug之前提过重复了，还是说他现在有紧急的任务需要处理，这个bug不是很严重，可以延期再处理，还是说他认为这个bug不是bug，如果开发认为不是bug,我会整理好一个详细的bug出现的文档，拿给开发，如果他坚持不改，我会直接找他的上级领导，让他的领导与他沟通； 5.测试过程中，开发人员认为不是bug怎么办？ 首先我会先正确理解出现的错误时bug还是软件缺陷，如果是软件缺陷，我会直接找部门经理，由部门经理与开发人员协调，如果是bug，我会理清楚bug出现的原因，然后整理成报告给相应的开发人员，如果他还不改的话，我会跟部门的负责人说，让领导进行处理。 6.常用的响应状态码？ 200请求成功，201新增成功，204删除成功 302请求重定向 400代表客户端异常， 401代表访问的页面没有授权，403表示没有权限访问这个页面，404代表没有这个页面 500代表服务器异常，504代表服务器端超时，没返回结果 7.GET请求和POST请求的区别： ​ 1、GET使用URL或Cookie传参。而POST将数据放在BODY中。 2、GET的URL会有长度上的限制，则POST的数据则可以非常大。 3.get的效率高于post 4、POST比GET安全，因为数据在地址栏上不可见。 5、一般get请求用来获取数据，post请求用来发送数据。 8.为什么https比http安全？ https在 http基础上增加了数据加密 ，从而使得客户端和服务器之间传输的数据更加安全 9.Web测试与APP测试的差异性? a.web是b/s架构，app是C/s架构,APP的兼容性测试尤为重要：由于手机厂商生产的手机型号及相关软硬件存在千千万万的差异性，进而APP端需 要着重考虑分辨率、系统版本、尺寸、主流机型等等； b.APP性能测试指标不一样：除了需要和web一样考虑APP客户端的性能外，我们还需要考虑电量、流量的消耗、 GPU渲染等； c.APP网络测试场景的复杂性：如2G、3G、4G、5G、wiﬁ、弱网环境等 d.APP基于手机载体存在的交叉事件测试、前后台切换、安装/卸载/升级测试 e.APP基于手机载体特有的一些用户操作习惯类测试，如横竖屏切换、多点触控、事件触发区域等 10.测试一般分为三轮测试 第一轮，提交测试之后，快速的把所有功能都测一遍，第一时间发现所有的bug，然后让开发去修改，这样比较节省时间，提高效率。然后再细测每一个功能，直到所有的bug都改完以后，开始测第二轮。 第二轮测试以后发现bug的话，可能就还会有第三轮测试，希望在第二轮就能把所有的bug解决完，不要再产生新的bug。 第三轮主要是回归了，不会像第一轮和第二轮那么仔细，主要回归一些重点，没有问题以后，测试就会通过了，通过以后会发测试通过邮件，开发会把代码部署到预上线环节，然后我们再会去预上线环节去验证，主要验证一些主要功能点，以及在测试环境中产生的一些bug，看看代码是否都更新正确，代码更新到预上线环节以后，希望别出现更错的情况。 比如A文件有10行代码的更新，但是上传到预上线环节的时候，没有上传上去，我们主要通过在测试环境产生的bug和一些功能点来确认代码更新正确，另外因为预上线环节和测试环节，环境不同，可能会导致出现新的bug，然后我们会让开发去定位，看看是测试环境没有测试出来，还是因为环境改变产生的新bug，反复的进行确认，直到预上线环境没有问题，就会更新到线上了，至于什么时候上线由产品决定，我们只是测完以后告诉产品我们测完了。 11.工作如何分配的？我们组长让我们一人负责一块，但是功能可能会有交叉的地方，我们每个人都会看一眼，其余功能，我们没事的时候，也会去测试一下，因为了解整个系统才是最关键的，才能保证每一次变化都能知道，写好测试用例，所以，除了平时固定负责的模块，其他模块如果其他人忙不过来的话，我们也会帮忙测的，主要就是通过测试用例的形式来测试 12.有哪些测试环境？测试环境一般分为4个测试环境，开发那边有一个本地环境，这个是他们自己调试用，代码开发完以后发布到测试环境，测试环境主要是应为他们发的，测试环境测完以后没有问题，会更新到预上线环境，预上环境测完没有问题就会发布到线上环境，预上线环境是用来主要是模拟线上更新，因为预上线环境和线上环境是比较像的，其次是可以用预上线环境来验证一些线上bug，可能测试环境的代码已经跟线上不一样了，所以有一些线上bug可能没办法在测试环境验，在测试环境验不是很严谨，一般在预上线环境验，还有没有更新代码的时候，有回滚方案，测试完以后呢，开发会把他们最后一次提交的Git版本号发出来，如果有问题的话还会进行回滚，对于线上的问题，如果出现了紧急bug，我们会启动紧急更新流程，第一时间确认一下问题，确认完问题存在以后，开发会去修复，修复完以后会执行一些核心的测试用例，以保证改完以后这个bug不会产生新的bug，然后上线，及时响应。 13.你以前工作的测试流程是什么？ 先开需求评审，一般是两周一个迭代，迭代开始之前的周四或者周五我们进行需求评审，这是第一次评审，一般是确定一下做哪些功能，哪些功能不做，测试这边也会给出一下需要的时间，开发给出大概需要的时间，都OK之后呢，产品就会去修改文档了，修改完之后呢，我们用Git管理的需求的文档，他们会把文档上传上去，之后呢，我们会把文档拉下来，之后就准备写测试用例了，大概是希望在周四之前把测试用例都写完，写完之后呢，会再进行一次评审，这个评审存在的一个问题就是产品和开发的参与度不是很高，他们提出的测试用例可能有限，但是也会给一些建议，所以呢，我们之前也给出过一些方法，比如每个人至少给出两条建议，但是如果项目进度特别赶的话，可能也不是很理想，所以自己在写测试用例的过程中写的比较好，写完之后呢，就等待提测，一般是周五的时候会提测，有时候也会有延期的情况，提交测试的环境呢，都是运维部署的，不是测试部署的。 运维部署完之后，告诉我们开始测试，我们开始执行测试用例，发现bug的话，就提交到那个jira的项目管理工具上，这个bug指派给负责人以后，我们会跟踪一下，如果修复了我们会验证一下，如果没有修复好的话呢，会再指给相应的人，如果修复好以后就关闭了。 这相当于第一轮测试完毕，第一轮完毕以后会有第二轮。因为第一轮测试完毕之后也还需要把所有的功能都再看一遍，没有问题的话，就发布预上线环境，更新到预上线环境之后，会再验证一下，并叫上产品一起验证。 整个过程都是发邮件的形式，如果想立即上线就会发布到线上环境，然后再测一下，如果没有问题就OK了，如果有问题的话就再走回滚流程。 需求评审（产品，测试，开发，开会，评审需求文档）开会讨论做什么，不做什么——测试预估测试时间——等产品更新文档——用GIT管理产品文档——GIT拉取到本地——写测试用例——产品开发一起评审——调整测试用例——等待提测——运维部署——执行测试用例——发现bug——提交到jira项目管理工具——指派给负责人——开发修复——验证——修复好以后——关闭 14.讲讲你的项目是如何做自动化测试的？ 前提：手工测试完毕了（应该是在系统测试之后，自动化做回归测试），要求项目需求变动不频繁，项目周期长，项目需要做回归测试的。 门类：自动化测试还是属于黑盒测试，只是用代码替代人来做功能测试。 正题：一般我们都是在项目稳定，在做回归测试的时候做自动化的测试。我们web主要是用python+selenium作自动化，,首先用火狐浏览器的firebug插件定位元素（多数用Xpath和CSS方法定位元素），然后用python中的unittest框架来测试，重写setUp（）与tearDown（）方法，setUp中主要是初始化webdriver，打开网址，和设置一些统一的浏览器条件（如登录，浏览器最大化），tearDown中主在测试结束后关闭一些资源（如关闭driver退出），然后根据用例要去会写一个testXXX（）为名字的方法写具体的测试用例（定位元素，跳转页面，填充数据，最后在try 中断言结果在except中截图）。 Ps：更高级的可以讲PO模式，pytest框架。Pytest是web与app都能用。 结合项目来说： Example1：在我的测试的商城后台的商品管理的添加、修改。是写一个python类继承unittest，在setUp方法中初始化driver，登录后台管理员。在tearDown中关闭driver。在定义个testcommoditychange的方法，在方法里找到商品按钮点击进入商品页面，定位“商品列表”的元素定位到商品管理的页面，定位“添加商品”按钮今如添加商品页面，然后通过读取配置文件（yaml，txt等很多文件格式都行）中提前写好的测试用以数据，按要去，分别定位添加到商品的分类属性总，然后点击发布商品按钮，断言结果与测试用以的预期结果是否相同。在main方法中执行测试用例。 然后在测试之前加入HTMLTestRunner这个类。利用它来生成测试报告。 15.一个测试需要具备什么好的条件? 了解和熟悉自己的项目，多看看产品文档，使用系统，每一个分支操作之后都应该知道是什么结果，只有这样才能写出好的测试用例，还要和产品多交流和沟通，也能增加对产品的认知，要多学习一些有用的工具，符合现阶段使用的，并不是说学的越多越好。 代码能力也很重要，写完代码才能理解一些代码层面的bug，不断学习不断总结。 16.测试人员在产品开发过程中，任务是什么？ 保证产品质量，控制好项目的进度，因为测试既连接产品又连接开发，测试有时候有必要提醒一下项目有进度上的风险，比如想周五提测，结果周五跟他们对接的时候，发现他们不能按时提测，要下周二才能提测，这时候就存在测试不完的情况，这也是一种风险，希望能提前发现，提前预警。 17.通过支付宝/微信给朋友转账设计测试用例? 1）正确流程的测试：输入金额，信息，支付密码 2）密码验证：是否提示支付密码，以及错误密码的提示，多次输入错误密码的情况 3）留言验证：符号，表情等其他是否可以输入 4）发送后返回界面的展示 5）异常随机错误：发红包界面随机的点击 6）发送成功后金额的显示 7）对方是否可以领取 8）断网，后台切换再重新打开app 9）手机版本兼容性测试 1）发送单个红包金额验证，最大最小阈值的验证。金额为0 等异常的验证，提示信息是否正确。 2）群发红包，红包的输入的最大限额，小数点位数限制，数值为0的验证。 3）文字输入框的验证。是否可输入非文字的内容。 4）红包的最大个数的验证。 5）普通红包与随机红包的验证：金额是否平均分，或随机分。 6）领取金额跟发送的红包金额是否相等， 7）塞钱按钮是否可用 8）为领完红包退回的验证。24小时超时退换的验证。 9）安卓与苹果系统之间是否可以互发互抢红包。 9）支付方式的验证：不同支付方式的验证，余额不足的处理。密码错误是否有提示。 10）支付密码是否在前端加密，在网络传输过程中是否加密， 11）送红包的响应时间是多少 12）是否支持不同的手机，不同的系统平台，版本，发红包抢红包，收红包，不同的手机，不同的平台，不同的版本是否可以相互发送红包抢红包收红包 13）红包的界面是否跟原型效果图一样 接口测试1.什么是接口文档？什么是接口清单？他们之间有什么关系？ 接口文档就是API文档，接口文档是架构师或开发写的，在定义接口文档的时候，里面有很多粗略的地方，第一：哪些字段必填不知道，哪些字段是什么类型不知道，第二：他们整理的只是一个通用的模板，真正实施的时候，例如真正查询的时候是指定查询，模糊查询还是组合查询上面根本就没有写，此时我们对其进行整理，整理出指定时的接口，模糊时的接口，组合时的接口， 当不知道此时开发还没开发，目的是开发照着接口文档进行开发，接口文档是公用的（产品，开发，测试等），接口文档里包含有哪些资源的定义，资源的url,有几个参数，写的比较笼统，写的不清楚，为了防止漏测和评审，我们才从接口文档里整理接口清单，接口清单里主要包括，请求和响应，请求里面包含，请求的url，请求参数，请求方法，响应里面包含响应状态码和响应的数据。 2.Jmeter测试工具都用哪些原件？Jmeter的常用原件有，HTTP请求——信息头（请求需要带头信息）——cookie信息管理器（模拟用户登录，获取token）有的token放在header里，有的放在cookie里的，如果放在header里的话就不用加cookie管理器——json提取器（可以提取到所有请求的返回信息）有一个缺点不能提取返回的头信息——正则提取器（可以提取信息头里的）——聚合报告（有很多属性统计，测QPS可以用聚合报告）——察看结果树（查看json结果访问数据）——函数助手（可以随机起名自动生成一个代码）——if控制器循环之类的，但是用的不多，剩下的都是要用的时候才能想起来。 3.使用jmeter怎么测？ 基于测试计划创建线程组，基于线程组添加http请求，基于测试计划添加查看结果树和聚合报告，可以在http请求里面添加同步定时器和断言。 4.接口测试中依赖登录的接口如何测试？ 获取token，模拟登录状态。 5.接口测试中，最重要的是什么？ 最重要的是覆盖率，你请求的参数要覆盖比较全。例如：你测购买的时候，肯定有一个参数叫购买数量，可以发送请求的时候，这个购买数量的字段可以等于0，也可以等于1，也可以等于负值，相当于我们用这种参数呢，把这种情况都覆盖到，如果有要求的话，我们还会测一下这个接口的性能，QPS是比较关注的，接口在并发请求的情况下，会不会有什么问题。不过我们一般前期不做性能测试，只在项目的中后期做性能测试。 ##移动端测试 1.常用的adb命令 adb –help 帮助命令；adb start-server 开启adb服务；adb kill-server 结束adb服务； adb devices 查看设备列表，获取设备名称；adb push 将电脑文件发送到手机； adb pull 将手机文件拉到电脑；adb logcat 查看手机运行日志； adb shell dumpsys window windows| findstr usedApp 查看包名和启动名； adb install apk所在路径 安装apk到手机；adb uninstall 包名 卸载apk文件； adb shell am start -W 包名/启动名 获取app应用启动时间； 2.用过什么测试框架？ Unitest，pytest ##性能测试 1.性能测试工具？ jmeter和Loadrunner jmeter做性能测试主要关注的目标是什么？ 这个就需要看聚合报告了，测试目标是什么就看什么（错误率，响应时间，吞吐量） Loadrunner 由三部分组成： a. Virtual User Generator（简称：VuGen）：编写脚本（脚本的增强） b. Controller ：场景搭建及运行 d. Analysis ：结果分析 2.Loadrunner做性能测试的流程？分类？指标？ 流程：需求分析–&gt;测试计划–&gt;测试用例–&gt;编写脚本–&gt;设计场景–&gt;运行场景–&gt;场景监控–&gt;结果分析–&gt;系统调优–&gt;测试报告 分类：压力测试，负载测试，并发测试，稳定性测试 指标：并发数(支持多少用户同时进行请求。)，吞吐量也叫QPS(每秒查询率)，响应时间（比如测一个接口的时候，看多长时间能返回），点击数，资源利用率（内存，cpu,硬盘），错误率 3.TPS和QPS有什么区别？ QPS针对单个接口，叫每秒查询率，之前做纯API服务的时候，没有界面，只给用户提供API调用的时候，我们会测试，这个接口的QPS，我们用jmeter测试的，用jmeter写好请求以后呢，我们会比如先模拟20个线程组，去通知请求接口，看它的QPS到达什么程度，直到出现error，出现错误返回的时候，我们就停止，不一定是线程组的数量越多，它的QPS就越高，当QPS达到一定的程度，并且没有错误的时候，会有一个最高值，我们认为它的最高值就是它的QPS。 TPS相当于是事物，引导事物数，相当于多个接口，比如在电商网站购买东西的时候，一个购买行为可能要请求好几个接口，所有的接口组合在一起，叫TPS，主要是描述用户行为的，支持某种用户的行为能力，我认为是这样的，但是我们没有测过TPS，主要还是测QPS。 ##常识 B2C：商家对客户，京东、当当、天猫; B2B：商家对商家，阿里巴巴(不零售，只批发，淘宝很多商家都会去阿里巴巴进货)； C2C：个人对个人，淘宝市场，淘宝，QQ商城； 1.windows系统的常用命令？ cd 切换目录；cd.. 返回上一级目录；cd \\ 返回到根目录； dir 显示目录中的内容；ctrl +z 中断命令执行； md 创建目录；rd删除目录；copy 复制文件；move 移动文件； del 删除文件；exit退出当前cmd窗口；ipconfig查看本机的ip;","link":"/2019/09/02/test/"}],"tags":[{"name":"Charles","slug":"Charles","link":"/tags/Charles/"},{"name":"http","slug":"http","link":"/tags/http/"},{"name":"https","slug":"https","link":"/tags/https/"},{"name":"blogs","slug":"blogs","link":"/tags/blogs/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"mac","slug":"mac","link":"/tags/mac/"},{"name":"Pycharm","slug":"Pycharm","link":"/tags/Pycharm/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"bug","slug":"bug","link":"/tags/bug/"},{"name":"app","slug":"app","link":"/tags/app/"},{"name":"测试","slug":"测试","link":"/tags/测试/"},{"name":"公众号","slug":"公众号","link":"/tags/公众号/"}],"categories":[{"name":"charles","slug":"charles","link":"/categories/charles/"},{"name":"hexo","slug":"hexo","link":"/categories/hexo/"},{"name":"Pycharm","slug":"Pycharm","link":"/categories/Pycharm/"},{"name":"mysql","slug":"mysql","link":"/categories/mysql/"},{"name":"移动端兼容性测试","slug":"移动端兼容性测试","link":"/categories/移动端兼容性测试/"},{"name":"公众号","slug":"公众号","link":"/categories/公众号/"},{"name":"手工测试,接口测试","slug":"手工测试-接口测试","link":"/categories/手工测试-接口测试/"}]}